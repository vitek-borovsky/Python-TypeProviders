from io import TextIOWrapper
import importlib
import datetime

DEBUG = True


class PropertyRecord:
    field_name: str
    typename: type

    def __init__(self, field_name: str, typename: type) -> None:
        self.field_name = field_name
        self.typename = typename

    def __repr__(self) -> str:
        return f"'{ self.field_name }' of type '{ self.typename.__name__ }'"

    def write(self, output_file, indentation_level: int, end_line: bool) -> None:
        output_file.write("\t" * indentation_level)
        output_file.write(f"{ self.field_name }: { self.typename.__name__ }")
        if (end_line):
            output_file.write("\n")


class Generator:
    output_file: TextIOWrapper
    # TODO
    # filename can't contain dots
    def __init__(self, filename = "_autogenerated_typeprovided_classes.py") -> None:
        self.filename = filename
        self.output_file = open(filename, "w")
        self.__resolve_imports()

    def __del__(self) -> None:
        self.output_file.close()


    def generate_class(self, class_name: str, records: list[PropertyRecord]) -> type:
        self.output_file.write(f"class {class_name}:\n")
        self.__generate_records(records)
        self.output_file.write("\n")
        self.__generate_constructor(records)
        self.output_file.write("\n")
        self.__generate_repr(records)
        self.output_file.write("\n")
        self.output_file.flush()

        module = __import__(self.filename.removesuffix(".py"))
        importlib.reload(module)

        return getattr(module, class_name)

    def __resolve_imports(self):
        self.output_file.write("from datetime import *\n")
        self.output_file.write("\n")

    def __generate_records(self, records: list[PropertyRecord]):
        for record in records:
            record.write(self.output_file, 1, True)

    def __generate_constructor(self, records: list[PropertyRecord]):
        self.output_file.write("\tdef __init__ (self")
        for record in records:
            self.output_file.write(f", { record.field_name }")

        self.output_file.write("):\n")
        for record in records:
            if record.typename == datetime.date: # date doesn't have constructor or rather cast that takes another date obj
                self.output_file.write(
                    f"\t\tself.{ record.field_name } = { record.field_name }\n")

                continue
            self.output_file.write(
                f"\t\tself.{ record.field_name } = { record.typename.__name__ }({ record.field_name })\n")

    def __generate_repr(self, records: list[PropertyRecord]):
        if not DEBUG:
            return
        self.output_file.write("\tdef __repr__(self):\n")
        vals = []
        for record in records:
            vals.append(
                f"f\"{ record.field_name } = " + "{"  + f"str(self.{ record.field_name })" + "}\\n\"")

        self.output_file.write("\t\treturn ")
        self.output_file.write(" + ".join(vals))


