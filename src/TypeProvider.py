from sql_parsing.code_generation.generator import Generator

from sql_parsing.recordBuilder import RecordBuilder as RB

# connection = psycopg2.connect(
#     user="postgres",
#     password="",
#     # host="localhost",
#     port="5432", # default port
#     database="mydatabase"
# )
#
# cursor = connection.cursor()
#
# # cmd = """
# # SELECT column_name, data_type
# # FROM information_schema.columns
# # WHERE table_name = 'employees';
# # """
#
# cmd = """
# SELECT * FROM employees;
# """
#
# cursor.execute(cmd)
#
# # response = cursor.fetchall()
# response = cursor.fetchone() # tuple[Any]
#
#
# print(response[1])
#
# cursor.close()
# connection.close()

generator = Generator()
class_count = 0

class SqlTypeProvider:
    @staticmethod
    def Provide(connection, command: str) -> type:
        global class_count
        records = RB.parse(connection, command)

        class_count += 1
        return generator.generate_class(f"autogenerated_class_{ class_count }", records)

